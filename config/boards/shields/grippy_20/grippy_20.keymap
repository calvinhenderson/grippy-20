#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// CONFIG
#define COMBO_LAYERS      0
#define COMBO_TIMEOUT    80
#define STICKY_TIMEOUT  500
#define TAPPING_TIMEOUT 200

// LEFT SIDE
#define TLI  3 // TOP
#define TLM  2 // TOP
#define TLR  1 // TOP
#define TLP  0 // TOP
#define BLI 11 // BOTTOM
#define BLM 10 // BOTTOM
#define BLR  9 // BOTTOM
#define BLP  8 // BOTTOM
#define LOT 17 // O-THUMB
#define LIT 16 // I-THUMB

// RIGHT SIDE
#define TRI  4 // TOP
#define TRM  5 // TOP
#define TRR  6 // TOP
#define TRP  7 // TOP
#define BRI 12 // BOTTOM
#define BRM 13 // BOTTOM
#define BRR 14 // BOTTOM
#define BRP 15 // BOTTOM
#define ROT 18 // O-THUMB
#define RIT 19 // I-THUMB

#define TCOMBO(NAME, BINDINGS, OUTER_BINDINGS, INNER_BINDINGS, BOTH_BINDINGS, LEFT_KEYPOS, RIGHT_KEYPOS) \
combo_l_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BINDINGS>; \
	key-positions = <LEFT_KEYPOS>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_li_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <INNER_BINDINGS>; \
	key-positions = <LEFT_KEYPOS LIT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_lo_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <OUTER_BINDINGS>; \
	key-positions = <LEFT_KEYPOS LOT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_lb_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BOTH_BINDINGS>; \
	key-positions = <LEFT_KEYPOS LIT LOT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_r_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BINDINGS>; \
	key-positions = <RIGHT_KEYPOS>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_ri_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <INNER_BINDINGS>; \
	key-positions = <RIGHT_KEYPOS RIT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_ro_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <OUTER_BINDINGS>; \
	key-positions = <RIGHT_KEYPOS ROT>; \
	layers = <COMBO_LAYERS>; \
}; \
combo_rb_##NAME { \
	timeout-ms = <COMBO_TIMEOUT>; \
	bindings = <BOTH_BINDINGS>; \
	key-positions = <RIGHT_KEYPOS RIT ROT>; \
	layers = <COMBO_LAYERS>; \
};

/ {
  behaviors {
    sk: sticky_key {
      compatible = "zmk,behavior-sticky-key";
      release-after-ms = <STICKY_TIMEOUT>;
      quick-release;
      ignore-modifiers;
    };

    td_lgui: tap_dance_lgui {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TIMEOUT>;
      bindings = <&sk LGUI>, <&kt LGUI>;
    };

    td_lalt: tap_dance_lalt {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TIMEOUT>;
      bindings = <&sk LALT>, <&kt LALT>;
    };

    td_lctl: tap_dance_lctl {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TIMEOUT>;
      bindings = <&sk LCTRL>, <&kt LCTRL>;
    };

    td_lsft: tap_dance_lsft {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <TAPPING_TIMEOUT>;
      bindings = <&sk LSHIFT>, <&kt LSHIFT>;
    };
  };

  combos {
    compatible = "zmk,combos";

    combo_l_space {
	    timeout-ms = <COMBO_TIMEOUT>;
	    bindings = <&kp SPACE>;
	    key-positions = <LOT>;
	    layers = <COMBO_LAYERS>;
    };

    combo_r_space {
	    timeout-ms = <COMBO_TIMEOUT>;
	    bindings = <&kp SPACE>;
	    key-positions = <ROT>;
	    layers = <COMBO_LAYERS>;
    };

    combo_l_bspc {
	    timeout-ms = <COMBO_TIMEOUT>;
	    bindings = <&kp BSPC>;
	    key-positions = <LIT>;
	    layers = <COMBO_LAYERS>;
    };

    combo_r_bspc {
	    timeout-ms = <COMBO_TIMEOUT>;
	    bindings = <&kp BSPC>;
	    key-positions = <RIT>;
	    layers = <COMBO_LAYERS>;
    };

    TCOMBO(R,      &kp R,         &kp LS(R),      &kp GT,       &kp C_NEXT,      TLP,         TRP)
    TCOMBO(S,      &kp S,         &kp LS(S),      &kp RBRC,     &kp C_BRI_UP,    TLR,         TRR)
    TCOMBO(N,      &kp N,         &kp LS(N),      &kp RBKT,     &kp C_BRI_DN,    TLM,         TRM)
    TCOMBO(I,      &kp I,         &kp LS(I),      &kp RPAR,     &kp C_PP,        TLI,         TRI)
    TCOMBO(A,      &kp A,         &kp LS(A),      &kp LT,       &kp C_PREV,      BLP,         BRP)
    TCOMBO(O,      &kp O,         &kp LS(O),      &kp LBRC,     &kp C_VOL_UP,    BLR,         BRR)
    TCOMBO(T,      &kp T,         &kp LS(T),      &kp LBKT,     &kp C_VOL_DN,    BLM,         BRM)
    TCOMBO(E,      &kp E,         &kp LS(E),      &kp LPAR,     &kp C_MUTE,      BLI,         BRI)
    TCOMBO(C,      &kp C,         &kp LS(C),      &kp N1,       &kp F1,          BLR BLI,     BRR BRI)
    TCOMBO(U,      &kp U,         &kp LS(U),      &kp N2,       &kp F2,          BLR BLM,     BRR BRM)
    TCOMBO(Q,      &kp Q,         &kp LS(Q),      &kp N3,       &kp F3,          BLP BLM,     BRP BRM)
    TCOMBO(L,      &kp L,         &kp LS(L),      &kp N4,       &kp F4,          BLP BLR,     BRP BRR)
    TCOMBO(Y,      &kp Y,         &kp LS(Y),      &kp N5,       &kp F5,          TLM TLI,     TRM TRI)
    TCOMBO(F,      &kp F,         &kp LS(F),      &kp N6,       &kp F6,          TLR TLI,     TRR TRI)
    TCOMBO(P,      &kp P,         &kp LS(P),      &kp N7,       &kp F7,          TLR TLM,     TRR TRM)
    TCOMBO(Z,      &kp Z,         &kp LS(Z),      &kp N8,       &kp F8,          TLP TLM,     TRP TRM)
    TCOMBO(B,      &kp B,         &kp LS(B),      &kp N9,       &kp F9,          TLP TLR,     TRP TRR)
    TCOMBO(H,      &kp H,         &kp LS(H),      &kp N0,       &kp F10,         BLM BLI,     BRM BRI)
    TCOMBO(D,      &kp D,         &kp LS(D),      &kp AT,       &kp F11,         BLP BLI,     BRP BRI)
    TCOMBO(G,      &kp G,         &kp LS(G),      &kp HASH,     &kp F12,         TLP TLI,     TRP TRI)
    TCOMBO(X,      &kp X,         &kp LS(X),      &kp CARET,    &kp LC(X),       TLP BLM,     TRP BRM)
    TCOMBO(K,      &kp K,         &kp LS(K),      &kp PLUS,     &kp LC(C),       TLI BLR,     TRI BRR)
    TCOMBO(V,      &kp V,         &kp LS(V),      &kp STAR,     &kp LC(V),       TLR BLI,     TRR BRI)
    TCOMBO(J,      &kp J,         &kp LS(J),      &kp EQUAL,    &kp LC(Z),       TLM BLP,     TRM BRP)
    TCOMBO(M,      &kp M,         &kp LS(M),      &kp DOLLAR,   &kp K_LOCK,      TLP BLI,     TRP BRI)
    TCOMBO(W,      &kp W,         &kp LS(W),      &kp AMPS,     &none,           TLI BLP,     TRI BRP)
    TCOMBO(SLASH,  &kp SLASH,     &kp BSLH,       &kp PIPE,     &kp K_REDO,      TLR BLM,     TRR BRM)
    TCOMBO(MINUS,  &kp MINUS,     &kp UNDER,      &kp PRCNT,    &kp K_UNDO,      TLM BLR,     TRM BRR)
    TCOMBO(QMARK,  &kp QMARK,     &kp EXCL,       &kp CAPS,     &none,           TLI BLM,     TRI BRM)
    TCOMBO(COMMA,  &kp COMMA,     &kp DOT,        &kp TILDE,    &none,           TLM BLI,     TRM BRI)
    TCOMBO(SEMI,   &kp SEMI,      &kp COLON,      &none,        &none,           TLP BLR,     TRP BRR)
    TCOMBO(SEMI2,  &kp SEMI,      &kp COLON,      &none,        &none,           BLR TLM BLI, BRR TRM BRI)
    TCOMBO(SQT,    &kp SQT,       &kp DQT,        &kp GRAVE,    &none,           TLR BLP,     TRR BRP)
    TCOMBO(TAB,    &kp TAB,       &kp DEL,        &kp INS,      &bt BT_CLR,      TLR TLM TLI, TRR TRM TRI)
    TCOMBO(ENTER,  &kp ENTER,     &kp ESC,        &kp LALT,     &bootloader,     BLR BLM BLI, BRR BRM BRI)
    TCOMBO(LGUI,   &td_lsft,      &kp RIGHT,      &kp PGUP,     &bt BT_SEL 3,    TLP BLP,     TRP BRP)
    TCOMBO(LALT,   &td_lalt,      &kp UP,         &kp HOME,     &bt BT_SEL 2,    TLR BLR,     TRR BRR)
    TCOMBO(LCTRL,  &td_lctl,      &kp DOWN,       &kp END,      &bt BT_SEL 1,    TLM BLM,     TRM BRM)
    TCOMBO(LSHIFT, &td_lgui,      &kp LEFT,       &kp PGDN,     &bt BT_SEL 0,    TLI BLI,     TRI BRI)
    TCOMBO(XCP,    &kp C_AC_COPY, &kp C_AC_PASTE, &kp C_AC_CUT, &none,           BLR TLM TLI, BRR TRM TRI)
  };

  keymap {
    compatible = "zmk,keymap";

    default_layer {
      bindings = <
        &none &none &none &none    &none &none &none &none
        &none &none &none &none    &none &none &none &none
        /*       */ &none &none    &none &none
      >;
    };
  };
};
